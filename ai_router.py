import requests

class AIRouter:
    def __init__(self, api_key: str, base_url: str = "https://routellm.abacus.ai/v1/chat/completions"):
        """
        AI Router –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (Claude, GPT-4.1, DeepSeek –∏ –¥—Ä.)
        :param api_key: API –∫–ª—é—á RouteLLM
        :param base_url: –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RouteLLM Completions)
        """
        self.api_key = api_key
        self.base_url = base_url

    def determine_model(self, task: str) -> str:
        """
        –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ RouteLLM —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å.
        """
        task_lower = task.lower()

        if any(word in task_lower for word in ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "menu", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "ux", "–¥–∏–∑–∞–π–Ω"]):
            return "claude-3.5-sonnet"
        elif any(word in task_lower for word in ["–±–¥", "sqlalchemy", "async", "crud", "–ø–æ–¥–ø–∏—Å–∫", "–æ–ø–ª–∞—Ç", "–∑–∞–∫–∞–∑"]):
            return "gpt-4.1"
        elif any(word in task_lower for word in ["generate", "long code", "scaffold", "—à–∞–±–ª–æ–Ω", "–º–Ω–æ–≥–æ –∫–æ–¥–∞"]):
            return "deepseek-coder"
        else:
            return "gpt-4.1"

    def send_request(self, task: str, context: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ RouteLLM API.
        :param task: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        :param context: –æ–±—â–∏–π –ø—Ä–æ–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        :return: { success: bool, response: str | error: str }
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": "route-llm",
            "messages": [
                {"role": "system", "content": context},
                {"role": "user", "content": task}
            ],
            "stream": False   # üî• –≤–∞–∂–Ω–æ ‚Äî –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
        }

        try:
            response = requests.post(self.base_url, headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()

            # –û—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∏–ª–µ OpenAI: choices[0].message.content
            return {
                "success": True,
                "response": data.get("choices", [{}])[0].get("message", {}).get("content", "")
            }
        except Exception as e:
            return {"success": False, "error": str(e)}