# handlers/payments.py
# –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª ¬´–û–ø–ª–∞—Ç–∞¬ª
# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
# - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
# - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
# - –ö–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª ‚Äî –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ–¥ –ÆKassa (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π)

import os
import logging
from typing import List, Tuple, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler

from services import payments as payments_service

logger = logging.getLogger(__name__)

# –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ENV –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
CURRENCY = os.getenv("CURRENCY", "RUB")

# -------------------------
# –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ ¬´–û–ø–ª–∞—Ç–∞¬ª
# -------------------------
def get_user_payments_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="pay_status")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç", callback_data="pay_history")],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (–ÆKassa)", callback_data="pay_pay")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

# -------------------------
# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–∫—Ä–∞–Ω –æ–ø–ª–∞—Ç—ã
# -------------------------
async def payments_root(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí∞ –û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–æ—Ä–∏—é –æ–ø–ª–∞—Ç –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–ø–ª–∞—Ç—É."
    )
    await query.edit_message_text(text, reply_markup=get_user_payments_menu())

# -------------------------
# –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
# -------------------------
async def payments_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    try:
        sub = await payments_service.get_subscription(user_id)
        if not sub:
            text = (
                "üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å (–ÆKassa)¬ª, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
            )
        else:
            uid, plan, price, status, next_charge_at = sub
            when = next_charge_at.strftime('%d.%m.%Y') if hasattr(next_charge_at, "strftime") else (next_charge_at or "‚Äî")
            text = (
                f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
                f"üîπ –¢–∞—Ä–∏—Ñ: {plan}\n"
                f"üíµ –¶–µ–Ω–∞: {price} {CURRENCY}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÜ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {when}"
            )
    except Exception as e:
        logger.exception("payments_status failed")
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}"

    await query.edit_message_text(text, reply_markup=get_user_payments_menu())

# -------------------------
# –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç
# -------------------------
async def payments_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    try:
        await payments_service.init_db()
        rows: List[Tuple[float, str, str, Any]] = await payments_service.get_payments(user_id)
        if not rows:
            text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞."
        else:
            out = ["üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:\n"]
            for amount, currency, desc, created_at in rows:
                when = created_at.strftime('%d.%m.%Y') if hasattr(created_at, "strftime") else str(created_at)
                out.append(f"üíµ {currency} {amount} ‚Äî {desc} ({when})")
            text = "\n".join(out)
    except Exception as e:
        logger.exception("payments_history failed")
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç: {e}"

    await query.edit_message_text(text, reply_markup=get_user_payments_menu())

# -------------------------
# –û–ø–ª–∞—Ç–∏—Ç—å (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ÆKassa)
# -------------------------
async def payments_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ÆKassa (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏).
    # –ü–æ–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö URL.
    text = (
        "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —É–¥–æ–±–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. "
        "–ü–æ–∫–∞ —á—Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞.\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    await query.edit_message_text(text, reply_markup=get_user_payments_menu())

# -------------------------
# –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# -------------------------
def get_payment_handlers():
    return [
        CallbackQueryHandler(payments_root, pattern="^menu_payments$"),
        CallbackQueryHandler(payments_status, pattern="^pay_status$"),
        CallbackQueryHandler(payments_history, pattern="^pay_history$"),
        CallbackQueryHandler(payments_pay, pattern="^pay_pay$"),
    ]