# handlers/help.py
# –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–º–æ—â—å¬ª
# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
# - –ë—ã—Å—Ç—Ä—ã–π FAQ (—á—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã)
# - –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (username –∏–∑ ENV)
# - –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∞–º–∏

import os
import logging
from typing import List, Tuple, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler

from services import help as help_service

logger = logging.getLogger(__name__)

ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "FabricF_Manager").strip()

# -------------------------
# –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü–æ–º–æ—â—å¬ª
# -------------------------
def get_help_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üìñ FAQ", callback_data="help_faq")],
        [InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="help_contact")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

# -------------------------
# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏
# -------------------------
async def help_root(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üÜò –ü–æ–º–æ—â—å\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
    )
    await query.edit_message_text(text, reply_markup=get_help_menu())

# -------------------------
# FAQ
# -------------------------
async def help_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        rows: List[Tuple[int, str, str, str]] = await help_service.get_faq(limit=10, offset=0)
        if not rows:
            text = "üìñ FAQ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        else:
            parts = ["üìñ –¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤:\n"]
            for row in rows:
                faq_id, question, answer, created_at = row
                parts.append(f"‚ùì {question}\nüí° {answer}\n")
            text = "\n".join(parts)
    except Exception as e:
        logger.exception("help_faq failed")
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}"

    await query.edit_message_text(text, reply_markup=get_help_menu())

# -------------------------
# –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
# -------------------------
async def help_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ: @{ADMIN_USERNAME}\n"
        "–û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã —á–∞—Å–æ–≤."
    )
    await query.edit_message_text(text, reply_markup=get_help_menu())

# -------------------------
# –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# -------------------------
def get_help_handlers():
    return [
        CallbackQueryHandler(help_root, pattern="^menu_help$"),
        CallbackQueryHandler(help_faq, pattern="^help_faq$"),
        CallbackQueryHandler(help_contact, pattern="^help_contact$"),
    ]