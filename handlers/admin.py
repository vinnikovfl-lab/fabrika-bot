# handlers/admin.py
# –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å –¥–ª—è –±–æ—Ç–∞ ¬´–§–∞–±—Ä–∏–∫–∞ –ë—É–¥—É—â–µ–≥–æ¬ª
# Workflow —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (on_review -> approved/revisions/scheduled/published/archived)
# –í–ê–ñ–ù–û: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å block=False, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.

import logging
from typing import Callable, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

from menus.admin_menu import (
    get_admin_main_menu,
    get_admin_faq_menu,
    get_admin_posts_menu,
    get_admin_payments_menu,
)

from services import help as help_service
from services import posts as posts_service
from services import payments as payments_service

logger = logging.getLogger(__name__)

# ------------------------------------------------
# –û–±—ë—Ä—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: –∏–Ω—ä–µ–∫—Ü–∏—è is_admin_user
# ------------------------------------------------
def ensure_admin(func, is_admin_user: Callable):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user if update.effective_user else None
        if not user or not is_admin_user(user):
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            elif update.callback_query:
                await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

# ------------------------------------------------
# –≠–∫—Ä–∞–Ω –∞–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª–∏
# ------------------------------------------------
async def admin_start_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõ† –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=get_admin_main_menu())

async def admin_menu_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üõ† –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=get_admin_main_menu())

# ------------------------------------------------
# –†–∞–∑–¥–µ–ª FAQ
# ------------------------------------------------
async def admin_faq_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ", reply_markup=get_admin_faq_menu())

async def admin_faq_list_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rows = await help_service.get_faq()
    if not rows:
        text = "‚ö†Ô∏è FAQ –ø—É—Å—Ç"
    else:
        text = "üìã FAQ:\n\n" + "\n".join([f"ID:{r[0]} ‚Äî ‚ùì {r[1]}" for r in rows])
    await query.edit_message_text(text, reply_markup=get_admin_faq_menu())

async def start_add_faq_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["flow"] = "faq"
    context.user_data["faq_state"] = "waiting_question"
    await query.edit_message_text("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")

# ------------------------------------------------
# –†–∞–∑–¥–µ–ª –ü–æ—Å—Ç—ã (workflow)
# ------------------------------------------------
def _post_card_kb(post_id: int) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Approve", callback_data=f"ap_post_approve:{post_id}"),
            InlineKeyboardButton("‚úèÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏", callback_data=f"ap_post_revisions:{post_id}"),
        ],
        [
            InlineKeyboardButton("üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ap_post_schedule:{post_id}"),
            InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"ap_post_publish:{post_id}"),
        ],
        [
            InlineKeyboardButton("üóÑ –ê—Ä—Ö–∏–≤", callback_data=f"ap_post_archive:{post_id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_on_review_list"),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

async def admin_posts_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏", reply_markup=get_admin_posts_menu())

async def admin_post_list_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await posts_service.init_db()
    rows = await posts_service.get_current_week_posts()
    if not rows:
        text = "‚ö†Ô∏è –ü–æ—Å—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç"
    else:
        text_lines = ["üì∞ –ü–æ—Å—Ç—ã –Ω–µ–¥–µ–ª–∏:\n"]
        for row in rows:
            text_lines.append(f"ID:{row.id} ‚Äî {row.title} | {row.status}")
        text = "\n".join(text_lines)
    await query.edit_message_text(text, reply_markup=get_admin_posts_menu())

async def start_add_post_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["flow"] = "posts"
    context.user_data["post_state"] = "waiting_title"
    await query.edit_message_text("‚úç –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:")

# --- –ù–æ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ ---
async def admin_on_review_list_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await posts_service.init_db()
    rows = await posts_service.list_by_status("on_review", limit=20, offset=0)
    if not rows:
        text = "üóÇ –û—á–µ—Ä–µ–¥—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–∞."
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_posts")]])
    else:
        lines = ["üóÇ –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏:\n"]
        for p in rows:
            lines.append(f"ID:{p.id} ‚Äî {p.title}")
        text = "\n".join(lines)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç –ø–æ ID", callback_data="admin_open_post_prompt")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_posts")],
        ])
    await query.edit_message_text(text, reply_markup=kb)

async def admin_open_post_prompt_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["flow"] = "posts"
    context.user_data["post_state"] = "waiting_open_post_id"
    await query.edit_message_text("üîé –í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É:")

async def admin_open_post_card_impl(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    post = await posts_service.get_post(post_id)
    if not post:
        await update.callback_query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_posts_menu())
        return
    text = (
        f"üìù –ü–æ—Å—Ç ID:{post.id}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {post.status}\n"
        f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}\n\n"
        f"üßæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {post.review_comment or '‚Äî'}\n"
        f"üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {post.scheduled_at or '‚Äî'}\n"
    )
    await update.callback_query.edit_message_text(text, reply_markup=_post_card_kb(post.id))

# --- –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ ---
async def admin_post_approve_impl(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    query = update.callback_query
    await query.answer()
    await posts_service.set_status(post_id, "approved", reviewer_id=update.effective_user.id)
    await admin_open_post_card_impl(update, context, post_id)

async def admin_post_request_revisions_impl(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    query = update.callback_query
    await query.answer()
    context.user_data["flow"] = "posts"
    context.user_data["post_state"] = "waiting_revision_comment"
    context.user_data["review_post_id"] = post_id
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∞–≤–∫–∞–º (—á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å):")

async def admin_post_schedule_prompt_impl(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    query = update.callback_query
    await query.answer()
    context.user_data["flow"] = "posts"
    context.user_data["post_state"] = "waiting_schedule_dt"
    context.user_data["schedule_post_id"] = post_id
    await query.edit_message_text("üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM):")

async def admin_post_publish_impl(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    query = update.callback_query
    await query.answer()
    await posts_service.set_status(post_id, "published", reviewer_id=update.effective_user.id)
    await admin_open_post_card_impl(update, context, post_id)

async def admin_post_archive_impl(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    query = update.callback_query
    await query.answer()
    await posts_service.set_status(post_id, "archived", reviewer_id=update.effective_user.id)
    await admin_open_post_card_impl(update, context, post_id)

# ------------------------------------------------
# –†–∞–∑–¥–µ–ª –û–ø–ª–∞—Ç—ã/–ü–æ–¥–ø–∏—Å–∫–∏
# ------------------------------------------------
async def admin_payments_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", reply_markup=get_admin_payments_menu())

async def start_add_payment_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["flow"] = "payments"
    context.user_data["payment_state"] = "waiting_user"
    await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

async def start_cancel_sub_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["flow"] = "payments"
    context.user_data["sub_state"] = "waiting_cancel_user"
    await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å—é –ø–æ–¥–ø–∏—Å–∫—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:")

async def start_sub_info_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["flow"] = "payments"
    context.user_data["sub_state"] = "waiting_info_user"
    await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏:")

async def start_payment_history_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["flow"] = "payments"
    context.user_data["payment_state"] = "waiting_history_user"
    await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç:")

# ------------------------------------------------
# –ï–î–ò–ù–´–ô –¢–ï–ö–°–¢–û–í–´–ô –†–û–£–¢–ï–†
# ------------------------------------------------
async def admin_text_router_impl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    flow: Optional[str] = context.user_data.get("flow")
    if not flow:
        logger.debug("admin_text_router: no active flow; passing through")
        return

    # -------- FAQ flow ----------
    if flow == "faq":
        state = context.user_data.get("faq_state")
        if state == "waiting_question":
            context.user_data["new_faq_q"] = text
            context.user_data["faq_state"] = "waiting_answer"
            await update.message.reply_text("üí° –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
            return
        elif state == "waiting_answer":
            q = context.user_data.get("new_faq_q")
            try:
                await help_service.add_faq(q, text)
                await update.message.reply_text("‚úÖ –ù–æ–≤—ã–π FAQ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_faq_menu())
            except Exception as e:
                logger.exception("FAQ add failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ: {e}", reply_markup=get_admin_faq_menu())
            finally:
                context.user_data.clear()
            return

    # -------- Posts flow ----------
    if flow == "posts":
        state = context.user_data.get("post_state")
        logger.info(f"post_state={state}")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        if state == "waiting_title":
            context.user_data["new_post_title"] = text
            context.user_data["post_state"] = "waiting_content"
            await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
            return
        elif state == "waiting_content":
            title = context.user_data.get("new_post_title")
            try:
                await posts_service.init_db()
                post = await posts_service.create_post(title, text)
                await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (ID:{post.id})", reply_markup=get_admin_posts_menu())
            except Exception as e:
                logger.exception("Post add failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}", reply_markup=get_admin_posts_menu())
            finally:
                context.user_data.clear()
            return

        # –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: –æ–∂–∏–¥–∞–ª–∏ ID
        if state == "waiting_open_post_id":
            try:
                post_id = int(text)
                post = await posts_service.get_post(post_id)
                if not post:
                    await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    card = (
                        f"üìù –ü–æ—Å—Ç ID:{post.id}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {post.status}\n"
                        f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}\n\n"
                        f"üßæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {post.review_comment or '‚Äî'}\n"
                        f"üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {post.scheduled_at or '‚Äî'}\n"
                    )
                    await update.message.reply_text(card, reply_markup=_post_card_kb(post.id))
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            finally:
                context.user_data.pop("post_state", None)
            return

        # –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–æ–∫: –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if state == "waiting_revision_comment":
            post_id = context.user_data.get("review_post_id")
            try:
                await posts_service.set_status(post_id, "revisions_requested", reviewer_id=update.effective_user.id, review_comment=text)
                await update.message.reply_text("‚úèÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø—Ä–∞–≤–∫–∏ —É –∞–≤—Ç–æ—Ä–∞.", reply_markup=get_admin_posts_menu())
            except Exception as e:
                logger.exception("request revisions failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_admin_posts_menu())
            finally:
                context.user_data.clear()
            return

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∂–¥—ë–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
        if state == "waiting_schedule_dt":
            post_id = context.user_data.get("schedule_post_id")
            dt = text
            try:
                if len(dt) < 16 or dt[4] != "-" or dt[7] != "-" or dt[10] != " " or dt[13] != ":":
                    await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 2025-09-06 14:30")
                    return
                await posts_service.set_schedule(post_id, dt)
                await update.message.reply_text(f"üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {dt}.", reply_markup=get_admin_posts_menu())
            except Exception as e:
                logger.exception("schedule failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_admin_posts_menu())
            finally:
                context.user_data.clear()
            return

    # -------- Payments flow ----------
    if flow == "payments":
        p_state = context.user_data.get("payment_state")
        s_state = context.user_data.get("sub_state")

        if p_state == "waiting_user":
            try:
                user_id = int(text)
                context.user_data["payment_user"] = user_id
                context.user_data["payment_state"] = "waiting_amount"
                await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:")
            except Exception:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
            return
        elif p_state == "waiting_amount":
            try:
                amount = float(text)
                user_id = context.user_data.get("payment_user")
                await payments_service.init_db()
                pay = await payments_service.create_payment(user_id, amount)
                await update.message.reply_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (UserID:{user_id}, ID:{pay.id})",
                    reply_markup=get_admin_payments_menu()
                )
            except Exception as e:
                logger.exception("Payment add failed")
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            finally:
                context.user_data.clear()
            return

        if p_state == "waiting_history_user":
            try:
                user_id = int(text)
                await payments_service.init_db()
                rows = await payments_service.get_payments(user_id)
                if not rows:
                    await update.message.reply_text("üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–ø–ª–∞—Ç", reply_markup=get_admin_payments_menu())
                else:
                    out = ["üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:\n"]
                    for r in rows:
                        amount, currency, desc, created_at = r
                        when = created_at.strftime('%d.%m.%Y') if hasattr(created_at, "strftime") else str(created_at)
                        out.append(f"üíµ {currency} {amount} ‚Äî {desc} ({when})")
                    await update.message.reply_text("\n".join(out), reply_markup=get_admin_payments_menu())
            except Exception as e:
                logger.exception("Payment history failed")
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=get_admin_payments_menu())
            finally:
                context.user_data.clear()
            return

        if s_state == "waiting_info_user":
            try:
                user_id = int(text)
                sub = await payments_service.get_subscription(user_id)
                if not sub:
                    await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_admin_payments_menu())
                else:
                    uid, plan, price, status, next_charge_at = sub
                    when = next_charge_at.strftime('%d.%m.%Y') if hasattr(next_charge_at, "strftime") else (next_charge_at or "‚Äî")
                    info = (
                        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}\n\n"
                        f"üîπ –¢–∞—Ä–∏—Ñ: {plan}\n"
                        f"üíµ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                        f"üìÜ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {when}"
                    )
                    await update.message.reply_text(info, reply_markup=get_admin_payments_menu())
            except Exception as e:
                logger.exception("Subscription info failed")
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=get_admin_payments_menu())
            finally:
                context.user_data.clear()
            return

        if s_state == "waiting_cancel_user":
            try:
                user_id = int(text)
                await payments_service.init_db()
                result = await payments_service.cancel_subscription(user_id)
                if result:
                    await update.message.reply_text("üõë –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_payments_menu())
                else:
                    await update.message.reply_text("‚ö†Ô∏è –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=get_admin_payments_menu())
            except Exception as e:
                logger.exception("Cancel subscription failed")
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=get_admin_payments_menu())
            finally:
                context.user_data.clear()
            return

    logger.debug("admin_text_router: unrecognized state; passing through")

# ------------------------------------------------
# –≠–∫—Å–ø–æ—Ä—Ç: —Ñ–∞–±—Ä–∏–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------------------------
def get_admin_handlers(is_admin_user_callable: Callable):
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    admin_start = ensure_admin(admin_start_impl, is_admin_user_callable)
    admin_menu = ensure_admin(admin_menu_impl, is_admin_user_callable)

    admin_faq = ensure_admin(admin_faq_impl, is_admin_user_callable)
    admin_faq_list = ensure_admin(admin_faq_list_impl, is_admin_user_callable)
    start_add_faq = ensure_admin(start_add_faq_impl, is_admin_user_callable)

    admin_posts = ensure_admin(admin_posts_impl, is_admin_user_callable)
    admin_post_list = ensure_admin(admin_post_list_impl, is_admin_user_callable)
    start_add_post = ensure_admin(start_add_post_impl, is_admin_user_callable)

    # –ù–æ–≤—ã–µ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é
    admin_on_review_list = ensure_admin(admin_on_review_list_impl, is_admin_user_callable)
    admin_open_post_prompt = ensure_admin(admin_open_post_prompt_impl, is_admin_user_callable)

    # callback —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ID —á–µ—Ä–µ–∑ lambda-–æ–±—ë—Ä—Ç–∫—É
    def with_id(handler, prefix):
        async def _wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            data = query.data  # e.g. "ap_post_approve:123"
            try:
                post_id = int(data.split(":")[1])
            except Exception:
                await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
                return
            await handler(update, context, post_id)
        return ensure_admin(_wrapped, is_admin_user_callable)

    admin_open_post_card = with_id(admin_open_post_card_impl, "ap_post_open")
    admin_post_approve = with_id(admin_post_approve_impl, "ap_post_approve")
    admin_post_request_revisions = with_id(admin_post_request_revisions_impl, "ap_post_revisions")
    admin_post_schedule_prompt = with_id(admin_post_schedule_prompt_impl, "ap_post_schedule")
    admin_post_publish = with_id(admin_post_publish_impl, "ap_post_publish")
    admin_post_archive = with_id(admin_post_archive_impl, "ap_post_archive")

    admin_payments = ensure_admin(admin_payments_impl, is_admin_user_callable)
    start_add_payment = ensure_admin(start_add_payment_impl, is_admin_user_callable)
    start_cancel_sub = ensure_admin(start_cancel_sub_impl, is_admin_user_callable)
    start_sub_info = ensure_admin(start_sub_info_impl, is_admin_user_callable)
    start_payment_history = ensure_admin(start_payment_history_impl, is_admin_user_callable)

    admin_text_router = ensure_admin(admin_text_router_impl, is_admin_user_callable)

    return [
        # –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
        CommandHandler("admin", admin_start),
        CallbackQueryHandler(admin_menu, pattern="^admin_menu$"),

        # FAQ
        CallbackQueryHandler(admin_faq, pattern="^admin_faq$"),
        CallbackQueryHandler(admin_faq_list, pattern="^admin_faq_list$"),
        CallbackQueryHandler(start_add_faq, pattern="^admin_faq_add$"),

        # –ü–æ—Å—Ç—ã (—Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é)
        CallbackQueryHandler(admin_posts, pattern="^admin_posts$"),
        CallbackQueryHandler(admin_post_list, pattern="^admin_post_list$"),
        CallbackQueryHandler(start_add_post, pattern="^admin_post_add$"),

        # –ü–æ—Å—Ç—ã: —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
        CallbackQueryHandler(admin_on_review_list, pattern="^admin_on_review_list$"),
        CallbackQueryHandler(admin_open_post_prompt, pattern="^admin_open_post_prompt$"),
        CallbackQueryHandler(admin_open_post_card, pattern="^ap_post_open:\\d+$"),
        CallbackQueryHandler(admin_post_approve, pattern="^ap_post_approve:\\d+$"),
        CallbackQueryHandler(admin_post_request_revisions, pattern="^ap_post_revisions:\\d+$"),
        CallbackQueryHandler(admin_post_schedule_prompt, pattern="^ap_post_schedule:\\d+$"),
        CallbackQueryHandler(admin_post_publish, pattern="^ap_post_publish:\\d+$"),
        CallbackQueryHandler(admin_post_archive, pattern="^ap_post_archive:\\d+$"),

        # –û–ø–ª–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        CallbackQueryHandler(admin_payments, pattern="^admin_payments$"),
        CallbackQueryHandler(start_add_payment, pattern="^admin_payment_add$"),
        CallbackQueryHandler(start_payment_history, pattern="^admin_payment_history$"),
        CallbackQueryHandler(start_sub_info, pattern="^admin_sub_info$"),
        CallbackQueryHandler(start_cancel_sub, pattern="^admin_sub_cancel$"),

        # –ï–î–ò–ù–´–ô —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä: –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_router, block=False),
    ]