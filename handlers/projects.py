# handlers/projects.py
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–µ–∫—Ç—ã¬ª: –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –∞—Ä—Ö–∏–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)
# –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
# - –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—á–∏—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π flow (context.user_data["flow"]) –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
# - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä —Å block=False, —á—Ç–æ–±—ã –æ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
#   –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ –∞–∫—Ç–∏–≤–µ–Ω.

import logging
from typing import List, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

from services import posts as posts_service

logger = logging.getLogger(__name__)

# -------------------------
# –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–æ–µ–∫—Ç—ã¬ª
# -------------------------
def get_projects_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üì∞ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="proj_publications")],
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∫–∏", callback_data="proj_approval")],
        [InlineKeyboardButton("üóÑ –ê—Ä—Ö–∏–≤", callback_data="proj_archive")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_publications_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é (—á–µ—Ä–Ω–æ–≤–∏–∫)", callback_data="proj_pub_add")],
        [InlineKeyboardButton("üìã –ü–æ—Å—Ç—ã –Ω–µ–¥–µ–ª–∏", callback_data="proj_pub_list_week")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_projects")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_approval_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", callback_data="proj_send_review")],
        [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ ID", callback_data="proj_check_status")],
        [InlineKeyboardButton("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é", callback_data="proj_submit_revision")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_projects")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_archive_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üì¶ –ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–æ–≤ (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ)", callback_data="proj_archive_list")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_projects")],
    ]
    return InlineKeyboardMarkup(keyboard)

# -------------------------
# –≠–∫—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–æ–µ–∫—Ç—ã¬ª
# -------------------------
async def projects_root(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìÇ –ü—Ä–æ–µ–∫—Ç—ã\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º –∏ –∞—Ä—Ö–∏–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    await query.edit_message_text(text, reply_markup=get_projects_menu())

# -------------------------
# –ü—É–±–ª–∏–∫–∞—Ü–∏–∏
# -------------------------
async def publications_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üì∞ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        "‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏\n"
        "‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await query.edit_message_text(text, reply_markup=get_publications_menu())

async def publications_list_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await posts_service.init_db()
        posts = await posts_service.get_current_week_posts()
        if not posts:
            text = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            lines: List[str] = ["üóì –ü–æ—Å—Ç—ã —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏:\n"]
            for p in posts:
                lines.append(f"ID:{p.id} ‚Äî {p.title} | {p.status}")
            text = "\n".join(lines)
    except Exception as e:
        logger.exception("publications_list_week failed")
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}"
    await query.edit_message_text(text, reply_markup=get_publications_menu())

async def start_add_publication(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –í–ê–ñ–ù–û: –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop("flow", None)                  # –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π flow
    context.user_data.pop("post_state", None)            # –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π state
    context.user_data.pop("review_post_id", None)        # —Ö–≤–æ—Å—Ç—ã –æ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    context.user_data.pop("schedule_post_id", None)

    context.user_data.pop("flow_client", None)
    context.user_data.pop("client_post_state", None)
    context.user_data.pop("client_new_post_title", None)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data["flow_client"] = "publications"
    context.user_data["client_post_state"] = "waiting_title"
    await query.edit_message_text("‚úç –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")

# -------------------------
# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∫–∏
# -------------------------
async def approval_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∫–∏\n\n"
        "‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ (–Ω—É–∂–µ–Ω ID –ø–æ—Å—Ç–∞)\n"
        "‚Äî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞\n"
        "‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∞–≤–æ–∫\n"
    )
    await query.edit_message_text(text, reply_markup=get_approval_menu())

async def approval_send_review_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["flow_client"] = "approval"
    context.user_data["client_approval_state"] = "waiting_post_id_for_review"
    await query.edit_message_text("üì§ –í–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:")

async def approval_check_status_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["flow_client"] = "approval"
    context.user_data["client_approval_state"] = "waiting_post_id_for_check"
    await query.edit_message_text("üîé –í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:")

async def approval_submit_revision_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["flow_client"] = "approval"
    context.user_data["client_approval_state"] = "waiting_post_id_for_revision"
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏:")

# -------------------------
# –ê—Ä—Ö–∏–≤
# -------------------------
async def archive_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = "üóÑ –ê—Ä—Ö–∏–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await query.edit_message_text(text, reply_markup=get_archive_menu())

async def archive_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await posts_service.init_db()
        archived = await posts_service.list_posts(status="archived", limit=20, offset=0)
        if not archived:
            text = "–í –∞—Ä—Ö–∏–≤–µ –ø—É—Å—Ç–æ."
        else:
            lines: List[str] = ["üì¶ –ê—Ä—Ö–∏–≤:\n"]
            for p in archived:
                lines.append(f"ID:{p.id} ‚Äî {p.title}")
            text = "\n".join(lines)
    except Exception as e:
        logger.exception("archive_list failed")
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}"
    await query.edit_message_text(text, reply_markup=get_archive_menu())

# -------------------------
# –ï–î–ò–ù–´–ô —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π)
# -------------------------
async def client_text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—à–∞–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: waiting_title -> waiting_content
    - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:
      - waiting_post_id_for_review -> set_status on_review
      - waiting_post_id_for_check -> –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      - waiting_post_id_for_revision -> –∑–∞—Ç–µ–º waiting_revision_content -> add_revision + on_review
    """
    text = (update.message.text or "").strip()
    flow = context.user_data.get("flow_client")
    if not flow:
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ (block=False –ø–æ–∑–≤–æ–ª–∏—Ç –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º —Å—Ä–∞–±–æ—Ç–∞—Ç—å)
        logger.debug("client_text_router: no flow_client, pass-through")
        return

    # –ß–µ—Ä–Ω–æ–≤–∏–∫
    if flow == "publications":
        state = context.user_data.get("client_post_state")
        logger.debug(f"client_text_router publications state={state}")
        if state == "waiting_title":
            context.user_data["client_new_post_title"] = text
            context.user_data["client_post_state"] = "waiting_content"
            await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
            return
        elif state == "waiting_content":
            title = context.user_data.get("client_new_post_title")
            content = text
            try:
                await posts_service.init_db()
                post = await posts_service.create_post(title=title, content=content, status="draft")
                await update.message.reply_text(
                    f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω (ID:{post.id}). "
                    f"–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∫–∏¬ª.",
                    reply_markup=get_publications_menu()
                )
            except Exception as e:
                logger.exception("client draft add failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}", reply_markup=get_publications_menu())
            finally:
                context.user_data.pop("client_post_state", None)
                context.user_data.pop("client_new_post_title", None)
                context.user_data.pop("flow_client", None)
            return

    # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    if flow == "approval":
        state = context.user_data.get("client_approval_state")
        logger.debug(f"client_text_router approval state={state}")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
        if state == "waiting_post_id_for_review":
            try:
                post_id = int(text)
                post = await posts_service.get_post(post_id)
                if not post:
                    await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                if post.status not in {"draft", "revisions_requested", "approved"}:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ {post.status}.")
                    return
                await posts_service.set_status(post_id, "on_review")
                await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.")
            except Exception as e:
                logger.exception("send to review failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            finally:
                context.user_data.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        if state == "waiting_post_id_for_check":
            try:
                post_id = int(text)
                post = await posts_service.get_post(post_id)
                if not post:
                    await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    txt = (
                        f"üìù –ü–æ—Å—Ç ID:{post.id}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {post.status}\n"
                        f"üßæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {post.review_comment or '‚Äî'}\n"
                        f"üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {post.scheduled_at or '‚Äî'}\n"
                    )
                    await update.message.reply_text(txt, reply_markup=get_approval_menu())
            except Exception as e:
                logger.exception("check status failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            finally:
                context.user_data.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: —à–∞–≥ 1 ‚Äî ID
        if state == "waiting_post_id_for_revision":
            try:
                post_id = int(text)
                post = await posts_service.get_post(post_id)
                if not post:
                    await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    context.user_data.clear()
                    return
                if post.status not in {"revisions_requested", "draft"}:
                    await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤ —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∫–∞–º–∏.")
                    context.user_data.clear()
                    return
                context.user_data["client_revision_post_id"] = post_id
                context.user_data["client_approval_state"] = "waiting_revision_content"
                await update.message.reply_text("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞ (—Ü–µ–ª–∏–∫–æ–º):")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                context.user_data.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: —à–∞–≥ 2 ‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç
        if state == "waiting_revision_content":
            post_id = context.user_data.get("client_revision_post_id")
            content = text
            try:
                await posts_service.add_revision(post_id, content, author_id=update.effective_user.id, note="client revision")
                await posts_service.update_post(post_id, content=content)  # –æ–±–Ω–æ–≤–∏–º —Ç–µ–ª–æ –ø–æ—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                await posts_service.set_status(post_id, "on_review")
                await update.message.reply_text("üì§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.", reply_markup=get_approval_menu())
            except Exception as e:
                logger.exception("submit revision failed")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_approval_menu())
            finally:
                context.user_data.clear()
            return

# -------------------------
# –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# -------------------------
def get_project_handlers():
    return [
        CallbackQueryHandler(projects_root, pattern="^menu_projects$"),

        # –ü—É–±–ª–∏–∫–∞—Ü–∏–∏
        CallbackQueryHandler(publications_home, pattern="^proj_publications$"),
        CallbackQueryHandler(publications_list_week, pattern="^proj_pub_list_week$"),
        CallbackQueryHandler(start_add_publication, pattern="^proj_pub_add$"),

        # –û–¥–æ–±—Ä–µ–Ω–∏–µ/–ø—Ä–∞–≤–∫–∏
        CallbackQueryHandler(approval_home, pattern="^proj_approval$"),
        CallbackQueryHandler(approval_send_review_prompt, pattern="^proj_send_review$"),
        CallbackQueryHandler(approval_check_status_prompt, pattern="^proj_check_status$"),
        CallbackQueryHandler(approval_submit_revision_prompt, pattern="^proj_submit_revision$"),

        # –ê—Ä—Ö–∏–≤
        CallbackQueryHandler(archive_home, pattern="^proj_archive$"),
        CallbackQueryHandler(archive_list, pattern="^proj_archive_list$"),

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: block=False ‚Äî —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        MessageHandler(filters.TEXT & ~filters.COMMAND, client_text_router, block=False),
    ]